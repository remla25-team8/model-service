name: Pre-release

on:
  push:
    branches:
      - main
      - master
    tags-ignore:
      - '**'

jobs:
  create-main-prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Calculate next pre-release version
        id: version
        run: |
          # Get the latest stable tag (not pre-release)
          LATEST_TAG=$(git tag -l 'v*' | grep -v '\-pre' | sort -V | tail -1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No stable tags exist, start with v0.1.0
            LATEST_TAG="v0.0.0"
            echo "No stable tags found, starting from v0.0.0"
          fi
          
          echo "Latest stable tag: $LATEST_TAG"
          
          # Extract base version (v1.2.3 -> 1.2.3)
          BASE_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
          
          # Split into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          
          # Increment PATCH version for pre-release (1.2.3 -> 1.2.4)
          NEXT_PATCH=$((PATCH + 1))
          BASE_PRE_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}-pre"
          
          # Get existing pre-release tags for this version
          EXISTING_TAGS=$(git tag -l "${BASE_PRE_VERSION}-*" | wc -l)
          ITERATION=$((EXISTING_TAGS + 1))
          
          # Create versioned pre-release (e.g., v1.2.4-pre-1)
          NEXT_VERSION="${BASE_PRE_VERSION}-${ITERATION}"
          STABLE_VERSION="v${MAJOR}.${MINOR}.${NEXT_PATCH}"
          
          # Get short commit SHA for reference
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "stable_version=${STABLE_VERSION}" >> $GITHUB_OUTPUT
          echo "base_pre_version=${BASE_PRE_VERSION}" >> $GITHUB_OUTPUT
          echo "iteration=${ITERATION}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          
          echo "Created pre-release version: ${NEXT_VERSION} (iteration ${ITERATION}) from main branch"
          echo "Commit: ${SHORT_SHA}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
    
      - name: Convert repository owner to lowercase
        id: lowercase
        run: |
          echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push pre-release image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-service:${{ steps.version.outputs.next_version }}
            ghcr.io/${{ steps.lowercase.outputs.owner }}/model-service:latest-pre
          build-args: |
            VERSION=${{ steps.version.outputs.next_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.next_version }}
          name: "Pre-release ${{ steps.version.outputs.next_version }}"
          body: |
            ðŸš€ **Automated pre-release from main branch** (Iteration ${{ steps.version.outputs.iteration }})
            
            **Base Version**: ${{ steps.version.outputs.latest_tag }}
            **Target Stable**: ${{ steps.version.outputs.stable_version }}
            **Commit**: ${{ steps.version.outputs.short_sha }}
            **Branch**: ${{ github.ref_name }}
            
            This pre-release contains the latest changes from the main branch and will become ${{ steps.version.outputs.stable_version }} when ready for stable release.
            
            ## Docker Images (Multi-Architecture)
            
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-service:${{ steps.version.outputs.next_version }}`
            - `ghcr.io/${{ steps.lowercase.outputs.owner }}/model-service:latest-pre`
            - Supports: `linux/amd64`, `linux/arm64`
            
            ## Usage
            
            ```bash
            # Specific version
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-service:${{ steps.version.outputs.next_version }}
            
            # Latest pre-release
            docker pull ghcr.io/${{ steps.lowercase.outputs.owner }}/model-service:latest-pre
            ```
            
            ## Changes
            
            See commit [${{ steps.version.outputs.short_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) for details.
          prerelease: true
          draft: false 